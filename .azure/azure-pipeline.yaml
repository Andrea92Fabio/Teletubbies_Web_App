# azure-pipelines.yml

trigger:
  - "*"

pool:
  vmImage: 'ubuntu-latest'

variables:
  FRONTEND_URL: 'http://localhost:8081/api/submission' 
  BACKEND_URL: 'http://localhost:8080/api/submission' 
  TEST_DATA: '{"name":"Andrea","surname":"Grossi","gender":"man","email":"xhunterx92@gmail.com","residencyCountry":"italia","fiscalCode":"GRSNRF92L31F205T","residencyZipCode":"20031","residencyAddress":"Via Enrico Berlinguer, 11","shipCountry":"Italia","shipZipCode":"20031","shipAddress":"Via Enrico Berlinguer, 11","privacy":true,"rules":true,"birthDate":"1992-07-31","phoneNumber":"3408461295","residencyProvince":"MI","shipProvince":"MI"}'

steps:
# Install Docker compose
  - script: |
      sudo apt-get update
      sudo apt-get install -y docker-compose
    displayName: 'Install docker compose'

# Install MySQL client
  - script: |
      sudo apt-get update
      sudo apt-get install -y mysql-client
    displayName: 'Install MySQL Client'  

# Install playwright
  - script: |
      npm install playwright
      npx playwright install
    displayName: 'Install Playwright'     

# Build & Start Containers
  - script: |
      docker-compose down -v
      docker-compose up --build -d
    displayName: 'Start docker compose'

# Test API Frontend
  - script: |
      curl --fail -X POST ${FRONTEND_URL} \
      -H 'Content-Type: application/json' \
      -d '$(TEST_DATA)'
    displayName: 'Integration Test - Frontend API'

# Test API Backend
  - script: |
      curl --fail -X POST ${BACKEND_URL} \
      -H 'Content-Type: application/json' \
      -d '$(TEST_DATA)'
    displayName: 'Integration Test - Backend API'

# Duplicate User Test (Negative Result)
  - script: |
      curl -X POST ${FRONTEND_URL} \
      -H 'Content-Type: application/json' \
      -d '$(TEST_DATA)'
    displayName: 'Integration Test - Frontend API (Negative)'

# Test End to End with Playwright


# Direct Database to verify created Users
  - script: |
      mysql -h db -u root -pmysecretpassword san_martino_friendship_day \
      -e "SELECT * FROM customers WHERE email='xhunterx92@gmail.com';"
    displayName: 'Verify Test User via MySQL Client' 

# Stop and cleanup the Container
  - script: docker-compose down
    displayName: 'Stop docker compose'