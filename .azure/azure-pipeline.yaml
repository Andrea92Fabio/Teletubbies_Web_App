# azure-pipelines.yml

trigger:
  - "*"

pool:
  vmImage: 'ubuntu-latest'

variables:
  FRONTEND_URL: 'http://localhost:8081/api/submission' 
  BACKEND_URL: 'http://localhost:8080/api/submission' 
  TEST_DATA: '{"name":"Andrea","surname":"Grossi","gender":"man","email":"xhunterx92@gmail.com","residencyCountry":"italy","fiscalCode":"GRSNRF92L31F205T","residencyZipCode":"20031","residencyAddress":"Via Enrico Berlinguer, 11","shipCountry":"italy","shipZipCode":"20031","shipAddress":"Via Enrico Berlinguer, 11","privacy":true,"rules":true,"birthDate":"1992-07-31","phoneNumber":"3408461295","residencyProvince":"MI","shipProvince":"MI"}'
              
steps:
# Install Docker compose
  - script: |
      sudo apt-get update
      sudo apt-get install -y docker-compose
    displayName: 'Install docker compose'

# Build & Start Containers
  - script: |
      docker-compose down -v
      docker-compose up --build -d


      echo "Waiting for backend and frontend to be healthy..."
      docker inspect --format='{{json .State.Health.Status}}' teletubbies-backend
      docker inspect --format='{{json .State.Health.Status}}' teletubbies-frontend

      for service in teletubbies-backend teletubbies-frontend; do
        retries=30
        until [ "$(docker inspect --format='{{.State.Health.Status}}' $service)" = "healthy" ] || [ $retries -eq 0 ]; do
          echo "Waiting for $service..."
          sleep 2
          retries=$((retries - 1))
        done
      done

      echo "All services are healthy!"
 
    displayName: 'Start docker compose and wait for services'

# Test API Backend
  - script: |
      RESPONSE=$(curl -s -o temp.json -w "%{http_code}" \
        -X POST "$BACKEND_URL" \
        -H "Content-Type: application/json" \
        -d "$TEST_DATA")

      echo "HTTP Status: $RESPONSE"
      cat temp.json

      if [ "$RESPONSE" = "201" ] && grep -q "submission successful" temp.json; then
        echo " Test backend superato"
      else
        echo " Test backend fallito"
        exit 1
      fi
    displayName: 'Integration Test - Backend API'


# Test API Backend
  - script: |
      set -x
      RESPONSE=$(curl -s -o temp.json -w "%{http_code}" \
        -X POST "$(BACKEND_URL)" \
        -H "Content-Type: application/json" \
        -d '$(TEST_DATA)')

      echo "HTTP Status: $RESPONSE"
      echo "Response body:"
      cat temp.json

      if [ "$RESPONSE" = "201" ] && grep -q "submission successful" temp.json; then
        echo "OK: Test backend superato"
      else
        echo "FAIL: Test backend fallito"
        exit 1
      fi
    displayName: 'Integration Test - Backend API'

# Test API Frontend
  - script: |
      RESPONSE=$(curl -s -o temp_front.json -w "%{http_code}" \
        -X POST "$(FRONTEND_URL)" \
        -H "Content-Type: application/json" \
        -d '$(TEST_DATA)')

      echo "HTTP Status: $RESPONSE"
      echo "Response body:"
      cat temp_front.json

      if [ "$RESPONSE" = "201" ] && grep -q "submission successful" temp_front.json; then
        echo "OK: Test frontend superato"
      else
        echo "FAIL: Test frontend fallito"
        exit 1
      fi
    displayName: 'Integration Test - Frontend API'

# Duplicate User Test (Negative Result)
  - script: |
      curl -X POST "$(FRONTEND_URL)" \
      -H 'Content-Type: application/json' \
      --data-raw '$(TEST_DATA)'
    displayName: 'Integration Test - Frontend API (Negative)'

# Install MySQL client
  - script: |
      sudo apt-get update
      sudo apt-get install -y mysql-client
    displayName: 'Install MySQL Client'  

# Direct Database to verify created Users
  - script: |     
      mysql -h 127.0.0.1 -u root -pmysecretpassword san_martino_friendship_day \
      -e "SELECT * FROM customers WHERE email='xhunterx92@gmail.com';"
    displayName: 'Verify Test User via MySQL Client'


# Install playwright
  - script: |
      npm install playwright
      npx playwright install
    displayName: 'Install Playwright' 

# Test End to End with Playwright

# Stop and cleanup the Container
  - script: docker-compose down
    displayName: 'Stop docker compose'