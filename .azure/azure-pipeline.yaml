# azure-pipelines.yml

trigger:
  - "*"

pool:
  vmImage: 'ubuntu-latest'

variables:
  FRONTEND_URL_API: 'http://localhost:8081/api/submission' 
  FRONTEND_URL_E2E: 'http://localhost:8081'
  BACKEND_URL_API: 'http://localhost:8080/api/submission'
  BACKEND_URL: 'http://localhost:8080'
  TEST_DATA: '{"name":"Andrea","surname":"Grossi","gender":"man","email":"xhunterx92@gmail.com","residencyCountry":"italy","fiscalCode":"GRSNRF92L31F205T","residencyZipCode":"20031","residencyAddress":"Via Enrico Berlinguer, 11","shipCountry":"italy","shipZipCode":"20031","shipAddress":"Via Enrico Berlinguer, 11","privacy":true,"rules":true,"birthDate":"1992-07-31","phoneNumber":"3408461295","residencyProvince":"MI","shipProvince":"MI"}'
              
steps:
# Install Docker compose and other dependencies
  - script: |
      sudo apt-get update
      sudo apt-get install -y docker-compose
      sudo apt-get install -y jq 
    displayName: 'Install docker compose and dependencies'

# Build & Start Containers
  - script: |
      docker-compose down -v
      docker-compose up --build -d

      echo "Waiting for frontend..."
      until curl -s -o /dev/null -w '%{http_code}' $(FRONTEND_URL_E2E); do
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Frontend not ready, retrying..."
        sleep 2
      done
      echo "Frontend is ready!"

      echo "Waiting for backend..."
      until curl -s -o /dev/null -w '%{http_code}' $(BACKEND_URL); do
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Backend not ready, retrying..."
        sleep 2
      done
      echo "Backend is ready!"
    displayName: 'Start docker compose and wait for services'

# Test API Backend
  - script: |
      set -x
      RESPONSE=$(curl -s -o temp.json -w "%{http_code}" \
        -X POST "$(BACKEND_URL_API)" \
        -H "Content-Type: application/json" \
        -d '$(TEST_DATA)')

      echo "HTTP Status: $RESPONSE"
      echo "Response body:"
      cat temp.json

      if [ "$RESPONSE" = "201" ] && grep -q "submission successful" temp.json; then
        echo "Test backend superato"
      else
        echo "Test backend fallito"
        exit 1
      fi
    displayName: 'Integration Test - Backend API'

# Test API Frontend
  - script: |
      RESPONSE=$(curl -s -o temp_front.json -w "%{http_code}" \
        -X POST "$(FRONTEND_URL_API)" \
        -H "Content-Type: application/json" \
        -d '$(TEST_DATA)')

      echo "HTTP Status: $RESPONSE"
      echo "Response body:"
      cat temp_front.json

      if [ "$RESPONSE" = "201" ] && grep -q "submission successful" temp_front.json; then
        echo "Test frontend superato"
      else
        echo "Test frontend fallito"
        exit 1
      fi
    displayName: 'Integration Test - Frontend API'

# Install MySQL client
  - script: |
      sudo apt-get update
      sudo apt-get install -y mysql-client
    displayName: 'Install MySQL Client'  

# Direct Database to verify created Users
  - script: |
      USER_COUNT=$(mysql -h 127.0.0.1 -P 3307 -u root -pmysecretpassword san_martino_friendship_day \
      -e "SELECT COUNT(*) FROM customers WHERE email='xhunterx92@gmail.com';" | tail -n 1)

      echo "Trovati $USER_COUNT utenti con l'email 'xhunterx92@gmail.com'."

      if [ "$USER_COUNT" = "1" ]; then
        echo "Verifica del database superata: l'utente Ã¨ stato creato una sola volta."
      else
        echo "Verifica del database fallita: trovato un numero di utenti diverso da 1."
        exit 1
      fi
    displayName: 'Verify Test User via MySQL Client'    

# Install Playwright and dependencies in the correct directory
  - script: |
      npm install
      npx playwright install --with-deps
    workingDirectory: 'Front-End'
    displayName: 'Install Playwright and dependencies'

# Test End to End with Playwright
  - script: |
      # Estrai i valori JSON dalla variabile
      NAME=$(echo '$(TEST_DATA)' | jq -r '.name')
      SURNAME=$(echo '$(TEST_DATA)' | jq -r '.surname')
      EMAIL=$(echo '$(TEST_DATA)' | jq -r '.email')
      
      # Crea la directory dei test se non esiste
      mkdir -p tests
      
      # Genera il file di test di Playwright con i passaggi corretti
      echo "import { test, expect } from '@playwright/test';" > tests/e2e.spec.ts
      echo "" >> tests/e2e.spec.ts
      echo "test('Registrazione utente con Playwright', async ({ page }) => {" >> tests/e2e.spec.ts

      echo "  // Passo 1: Vai alla home page" >> tests/e2e.spec.ts
      echo "  await page.goto('$(FRONTEND_URL_E2E)');" >> tests/e2e.spec.ts
      echo "" >> tests/e2e.spec.ts

      echo "  // Passo 2: Inserisci la data di nascita e clicca su Entra" >> tests/e2e.spec.ts
      echo "  await page.locator('input[type="date"]').fill('1990-01-01');" >> tests/e2e.spec.ts
      echo "  await page.locator('button:has-text(\"Entra\")').click();" >> tests/e2e.spec.ts
      echo "" >> tests/e2e.spec.ts

      echo "  // Passo 3: Clicca sul pulsante 'Partecipa ora'" >> tests/e2e.spec.ts
      echo "  await page.locator('a:has-text(\"Partecipa ora\")').click();" >> tests/e2e.spec.ts
      echo "" >> tests/e2e.spec.ts

      echo "  // Passo 4: Compila la form di registrazione" >> tests/e2e.spec.ts
      echo "  await page.locator('input[name=\"name\"]').fill('$NAME');" >> tests/e2e.spec.ts
      echo "  await page.locator('input[name=\"surname\"]').fill('$SURNAME');" >> tests/e2e.spec.ts
      echo "  await page.locator('input[name=\"email\"]').fill('$EMAIL');" >> tests/e2e.spec.ts
      echo "  await page.locator('input[name=\"privacy\"]').check();" >> tests/e2e.spec.ts
      echo "  await page.locator('input[name=\"rules\"]').check();" >> tests/e2e.spec.ts
      echo "" >> tests/e2e.spec.ts

      echo "  // Passo 5: Clicca sul pulsante 'Invia dati' e verifica il messaggio di successo" >> tests/e2e.spec.ts
      echo "  await page.locator('button[type=\"submit\"]').click();" >> tests/e2e.spec.ts
      echo "  await expect(page.locator('text=submission successful')).toBeVisible();" >> tests/e2e.spec.ts
      echo "});" >> tests/e2e.spec.ts
      
      # Esegue i test
      npx playwright test
    workingDirectory: 'Front-End'
    displayName: 'Run Playwright E2E Test'

# Stop and cleanup the Container
  - script: docker-compose down
    displayName: 'Stop docker compose'